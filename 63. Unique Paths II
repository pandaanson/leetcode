class Solution:
    def uniquePathsWithObstacles(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
    
        # If the starting cell has an obstacle, then return 0.
        if grid[0][0] == 1:
            return 0
        
        # Initialize the dp array with all zeros
        dp = [[0] * n for _ in range(m)]
        dp[0][0] = 1

        for i in range(m):
            for j in range(n):
                # If the current cell is an obstacle, continue to the next cell.
                if grid[i][j] == 1:
                    continue
                # If i-1 is a valid row, add paths from the cell above.
                if i - 1 >= 0:
                    dp[i][j] += dp[i-1][j]
                # If j-1 is a valid column, add paths from the cell to the left.
                if j - 1 >= 0:
                    dp[i][j] += dp[i][j-1]

        return dp[m-1][n-1]
