# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        stack1, stack2 = [], []
        
        # push all elements of l1 into stack1
        while l1:
            stack1.append(l1.val)
            l1 = l1.next
        
        # push all elements of l2 into stack2
        while l2:
            stack2.append(l2.val)
            l2 = l2.next
            
        carry = 0
        result_stack = []
        
        # pop out elements from each stack and add them up
        while stack1 or stack2 or carry:
            sum = carry
            if stack1:
                sum += stack1.pop()
            if stack2:
                sum += stack2.pop()
            
            carry, val = divmod(sum, 10)
            
            # create a new node and add it to the result_stack
            result_stack.append(ListNode(val))
        
        # pop out elements from result_stack to generate the final result list
        head = result_stack.pop()
        cur = head
        while result_stack:
            cur.next = result_stack.pop()
            cur = cur.next
            
        return head
